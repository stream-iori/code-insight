---
title: Detailed Type Relationships & Data Flow - Accurate Representation
description: UML class diagram matching exact Rust types from src/types.rs
---

classDiagram
    direction LR
    
    %% Core Data Types from types.rs
    class MavenModule {
        +String group_id
        +String artifact_id
        +String version
        +Option~String~ packaging
        +PathBuf path
        +Vec~MavenDependency~ dependencies
        +Vec~String~ submodules
    }
    
    class MavenDependency {
        +String group_id
        +String artifact_id
        +String version
        +Option~String~ scope
        +bool optional
    }
    
    class JavaFile {
        +PathBuf path
        +Option~String~ module
        +String package
        +Vec~String~ imports
        +Vec~Declaration~ declarations
        +String source_hash
    }
    
    class Declaration {
        +String name
        +DeclarationKind kind
        +Vec~String~ modifiers
        +Vec~Annotation~ annotations
        +String signature
        +Option~String~ extends
        +Vec~String~ implements
        +Vec~Field~ fields
        +Vec~Method~ methods
        +SourceRange range
        +Option~String~ documentation
    }
    
    class Field {
        +String name
        +String type_name
        +Vec~String~ modifiers
        +Vec~Annotation~ annotations
        +SourceRange range
    }
    
    class Method {
        +String name
        +String return_type
        +Vec~Parameter~ parameters
        +Vec~String~ modifiers
        +Vec~Annotation~ annotations
        +SourceRange range
        +Option~SourceRange~ body_range
    }
    
    class Parameter {
        +String name
        +String type_name
        +Vec~Annotation~ annotations
    }
    
    class Annotation {
        +String name
        +Vec~String~ values
    }
    
    class SourceRange {
        +usize start_line
        +usize start_column
        +usize end_line
        +usize end_column
    }
    
    class XmlFile {
        +PathBuf path
        +String root_element
        +String content
    }
    
    class PropertiesFile {
        +PathBuf path
        +Vec~String~ keys
        +Vec~String~ values
    }
    
    class SearchQuery {
        +String query
        +SearchKind kind
        +Vec~SearchFilter~ filters
        +Option~usize~ limit
    }
    
    class SearchResult {
        +Declaration declaration
        +PathBuf file_path
        +f32 score
        +String preview
    }
    
    class LlmExport {
        +String name
        +String kind
        +String signature
        +Option~String~ documentation
        +String code
        +String file_path
        +(usize, usize) line_range
    }
    
    class ReferenceGraph {
        +Vec~GraphNode~ nodes
        +Vec~GraphEdge~ edges
    }
    
    class GraphNode {
        +String id
        +String label
        +DeclarationKind kind
        +PathBuf file_path
    }
    
    class GraphEdge {
        +String from
        +String to
        +RelationshipType relationship
    }
    
    %% Enums from types.rs
    class DeclarationKind {
        <<enumeration>>
        Class
        Interface
        Enum
        Record
        Annotation
    }
    
    class SearchKind {
        <<enumeration>>
        Exact
        Fuzzy
        Regex
    }
    
    class SearchFilter {
        <<enumeration>>
        Kind(DeclarationKind)
        Annotation(String)
        Package(String)
        Module(String)
    }
    
    class RelationshipType {
        <<enumeration>>
        Extends
        Implements
        Uses
        References
        DependsOn
    }
    
    %% Relationships with exact multiplicities
    MavenModule "1" *-- "*" MavenDependency : contains
    MavenModule "1" *-- "*" JavaFile : contains
    
    JavaFile "1" *-- "*" Declaration : contains
    
    Declaration "1" *-- "*" Field : has
    Declaration "1" *-- "*" Method : has
    Declaration "1" *-- "*" Annotation : annotated_with
    
    Method "1" *-- "*" Parameter : has
    
    Annotation "1" *-- "*" String : has_values
    
    %% Search System Relationships
    SearchQuery "1" *-- "*" SearchFilter : filters_by
    SearchQuery "1" --> "*" SearchResult : produces
    SearchResult --> Declaration : contains
    
    %% Graph Relationships
    ReferenceGraph "1" *-- "*" GraphNode : has
    ReferenceGraph "1" *-- "*" GraphEdge : has
    GraphNode --> DeclarationKind : typed_as
    
    %% Export Relationships
    LlmExport --> Declaration : derived_from
    
    %% Additional file types
    MavenModule "*" -- "*" XmlFile : may_have
    MavenModule "*" -- "*" PropertiesFile : may_have
    
    %% Notes with accurate field descriptions
    note for MavenModule "Maven project definition from pom.xml\n\nKey fields:\n- group_id: company/org identifier\n- artifact_id: project name\n- version: semantic version\n- packaging: jar/war/pom (optional)\n- path: absolute file system path\n- dependencies: external libraries\n- submodules: child modules"
    
    note for JavaFile "Parsed Java source file\n\nKey fields:\n- path: absolute .java file path\n- module: parent Maven module\n- package: Java package declaration\n- imports: fully qualified imports\n- declarations: classes/interfaces/enums\n- source_hash: SHA-256 of source"
    
    note for Declaration "Java type declaration\n\nCan represent:\n- Classes (public class X)\n- Interfaces (public interface Y)\n- Enums (public enum Z)\n- Records (public record R)\n- Annotations (@interface A)\n\nContains fields, methods, and annotations"
    
    note for SearchQuery "Search configuration\n\nParameters:\n- query: search string\n- kind: exact/fuzzy/regex\n- filters: type/annotation/package/module\n- limit: max results (optional)"
    
    note for ReferenceGraph "Class relationship graph\n\nBuilds connections:\n- Extends: inheritance\n- Implements: interface realization\n- Uses: method calls\n- References: field usage\n- DependsOn: compilation dependencies"