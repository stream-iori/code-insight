{"$message_type":"diagnostic","message":"expected a type, found a trait","code":{"code":"E0782","explanation":"Trait objects must include the `dyn` keyword.\n\nErroneous code example:\n\n```edition2021,compile_fail,E0782\ntrait Foo {}\nfn test(arg: Box<Foo>) {} // error!\n```\n\nTrait objects are a way to call methods on types that are not known until\nruntime but conform to some trait.\n\nTrait objects should be formed with `Box<dyn Foo>`, but in the code above\n`dyn` is left off.\n\nThis makes it harder to see that `arg` is a trait object and not a\nsimply a heap allocated type called `Foo`.\n\nTo fix this issue, add `dyn` before the trait name.\n\n```edition2021\ntrait Foo {}\nfn test(arg: Box<dyn Foo>) {} // ok!\n```\n\nThis used to be allowed before edition 2021, but is now an error.\n"},"level":"error","spans":[{"file_name":"src/indexer/mod.rs","byte_start":3060,"byte_end":3085,"line_start":99,"line_end":99,"column_start":90,"column_end":115,"is_primary":true,"text":[{"text":"    fn create_document(&self, declaration: &Declaration, java_file: &JavaFile) -> Result<tantivy::schema::Document> {","highlight_start":90,"highlight_end":115}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can add the `dyn` keyword if you want a trait object","code":null,"level":"help","spans":[{"file_name":"src/indexer/mod.rs","byte_start":3060,"byte_end":3060,"line_start":99,"line_end":99,"column_start":90,"column_end":90,"is_primary":true,"text":[{"text":"    fn create_document(&self, declaration: &Declaration, java_file: &JavaFile) -> Result<tantivy::schema::Document> {","highlight_start":90,"highlight_end":90}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0782]\u001b[0m\u001b[0m\u001b[1m: expected a type, found a trait\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/indexer/mod.rs:99:90\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn create_document(&self, declaration: &Declaration, java_file: &JavaFile) -> Result<tantivy::schema::Document> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can add the `dyn` keyword if you want a trait object\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn create_document(&self, declaration: &Declaration, java_file: &JavaFile) -> Result<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mtantivy::schema::Document> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                          \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected a type, found a trait","code":{"code":"E0782","explanation":"Trait objects must include the `dyn` keyword.\n\nErroneous code example:\n\n```edition2021,compile_fail,E0782\ntrait Foo {}\nfn test(arg: Box<Foo>) {} // error!\n```\n\nTrait objects are a way to call methods on types that are not known until\nruntime but conform to some trait.\n\nTrait objects should be formed with `Box<dyn Foo>`, but in the code above\n`dyn` is left off.\n\nThis makes it harder to see that `arg` is a trait object and not a\nsimply a heap allocated type called `Foo`.\n\nTo fix this issue, add `dyn` before the trait name.\n\n```edition2021\ntrait Foo {}\nfn test(arg: Box<dyn Foo>) {} // ok!\n```\n\nThis used to be allowed before edition 2021, but is now an error.\n"},"level":"error","spans":[{"file_name":"src/indexer/mod.rs","byte_start":7867,"byte_end":7875,"line_start":213,"line_end":213,"column_start":40,"column_end":48,"is_primary":true,"text":[{"text":"    fn document_to_result(&self, doc: &Document, searcher: Searcher) -> Result<SearchResult> {","highlight_start":40,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Document` is dyn-incompatible, otherwise a trait object could be used","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use a new generic type parameter, constrained by `Document`","code":null,"level":"help","spans":[{"file_name":"src/indexer/mod.rs","byte_start":7867,"byte_end":7875,"line_start":213,"line_end":213,"column_start":40,"column_end":48,"is_primary":true,"text":[{"text":"    fn document_to_result(&self, doc: &Document, searcher: Searcher) -> Result<SearchResult> {","highlight_start":40,"highlight_end":48}],"label":null,"suggested_replacement":"T","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/indexer/mod.rs","byte_start":7853,"byte_end":7853,"line_start":213,"line_end":213,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"    fn document_to_result(&self, doc: &Document, searcher: Searcher) -> Result<SearchResult> {","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":"<T: Document>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"you can also use an opaque type, but users won't be able to specify the type parameter when calling the `fn`, having to rely exclusively on type inference","code":null,"level":"help","spans":[{"file_name":"src/indexer/mod.rs","byte_start":7867,"byte_end":7867,"line_start":213,"line_end":213,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"    fn document_to_result(&self, doc: &Document, searcher: Searcher) -> Result<SearchResult> {","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"impl ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0782]\u001b[0m\u001b[0m\u001b[1m: expected a type, found a trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/indexer/mod.rs:213:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn document_to_result(&self, doc: &Document, searcher: Searcher) -> Result<SearchResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Document` is dyn-incompatible, otherwise a trait object could be used\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use a new generic type parameter, constrained by `Document`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn document_to_result(&self, doc: &\u001b[0m\u001b[0m\u001b[38;5;9mDocument\u001b[0m\u001b[0m, searcher: Searcher) -> Result<SearchResult> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn document_to_result\u001b[0m\u001b[0m\u001b[38;5;10m<T: Document>\u001b[0m\u001b[0m(&self, doc: &\u001b[0m\u001b[0m\u001b[38;5;10mT\u001b[0m\u001b[0m, searcher: Searcher) -> Result<SearchResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can also use an opaque type, but users won't be able to specify the type parameter when calling the `fn`, having to rely exclusively on type inference\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn document_to_result(&self, doc: &\u001b[0m\u001b[0m\u001b[38;5;10mimpl \u001b[0m\u001b[0mDocument, searcher: Searcher) -> Result<SearchResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"expected a type, found a trait","code":{"code":"E0782","explanation":"Trait objects must include the `dyn` keyword.\n\nErroneous code example:\n\n```edition2021,compile_fail,E0782\ntrait Foo {}\nfn test(arg: Box<Foo>) {} // error!\n```\n\nTrait objects are a way to call methods on types that are not known until\nruntime but conform to some trait.\n\nTrait objects should be formed with `Box<dyn Foo>`, but in the code above\n`dyn` is left off.\n\nThis makes it harder to see that `arg` is a trait object and not a\nsimply a heap allocated type called `Foo`.\n\nTo fix this issue, add `dyn` before the trait name.\n\n```edition2021\ntrait Foo {}\nfn test(arg: Box<dyn Foo>) {} // ok!\n```\n\nThis used to be allowed before edition 2021, but is now an error.\n"},"level":"error","spans":[{"file_name":"src/indexer/mod.rs","byte_start":9084,"byte_end":9092,"line_start":247,"line_end":247,"column_start":49,"column_end":57,"is_primary":true,"text":[{"text":"    fn create_declaration_from_doc(&self, doc: &Document) -> Result<Declaration> {","highlight_start":49,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Document` is dyn-incompatible, otherwise a trait object could be used","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use a new generic type parameter, constrained by `Document`","code":null,"level":"help","spans":[{"file_name":"src/indexer/mod.rs","byte_start":9084,"byte_end":9092,"line_start":247,"line_end":247,"column_start":49,"column_end":57,"is_primary":true,"text":[{"text":"    fn create_declaration_from_doc(&self, doc: &Document) -> Result<Declaration> {","highlight_start":49,"highlight_end":57}],"label":null,"suggested_replacement":"T","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/indexer/mod.rs","byte_start":9070,"byte_end":9070,"line_start":247,"line_end":247,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"    fn create_declaration_from_doc(&self, doc: &Document) -> Result<Declaration> {","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":"<T: Document>","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"you can also use an opaque type, but users won't be able to specify the type parameter when calling the `fn`, having to rely exclusively on type inference","code":null,"level":"help","spans":[{"file_name":"src/indexer/mod.rs","byte_start":9084,"byte_end":9084,"line_start":247,"line_end":247,"column_start":49,"column_end":49,"is_primary":true,"text":[{"text":"    fn create_declaration_from_doc(&self, doc: &Document) -> Result<Declaration> {","highlight_start":49,"highlight_end":49}],"label":null,"suggested_replacement":"impl ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0782]\u001b[0m\u001b[0m\u001b[1m: expected a type, found a trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/indexer/mod.rs:247:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn create_declaration_from_doc(&self, doc: &Document) -> Result<Declaration> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Document` is dyn-incompatible, otherwise a trait object could be used\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use a new generic type parameter, constrained by `Document`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn create_declaration_from_doc(&self, doc: &\u001b[0m\u001b[0m\u001b[38;5;9mDocument\u001b[0m\u001b[0m) -> Result<Declaration> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn create_declaration_from_doc\u001b[0m\u001b[0m\u001b[38;5;10m<T: Document>\u001b[0m\u001b[0m(&self, doc: &\u001b[0m\u001b[0m\u001b[38;5;10mT\u001b[0m\u001b[0m) -> Result<Declaration> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can also use an opaque type, but users won't be able to specify the type parameter when calling the `fn`, having to rely exclusively on type inference\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn create_declaration_from_doc(&self, doc: &\u001b[0m\u001b[0m\u001b[38;5;10mimpl \u001b[0m\u001b[0mDocument) -> Result<Declaration> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0782`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0782`.\u001b[0m\n"}
